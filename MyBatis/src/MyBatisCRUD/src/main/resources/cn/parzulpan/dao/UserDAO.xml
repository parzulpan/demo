<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!--持久层接口的映射文件-->
<mapper namespace="cn.parzulpan.dao.UserDAO">
    <!-- 开启二级缓存的支持 -->
    <cache></cache>

    <select id="findAll" resultType="user">
        select * from user;
    </select>

    <select id="findById" resultType="USER" parameterType="java.lang.Integer">
        select * from user where id = #{id};
    </select>

    <insert id="saveUser" parameterType="cn.parzulpan.domain.User">
        # 扩展：新增用户 id 的返回值，在 insert 之后执行
        <selectKey keyColumn="id" keyProperty="id" resultType="int" order="AFTER">
            select last_insert_id();
        </selectKey>
        insert into user(username, birthday, sex, address) values (#{username}, #{birthday}, #{sex}, #{address});
    </insert>

    <update id="updateUser" parameterType="cn.parzulpan.domain.User">
        update user set username = #{username}, birthday = #{birthday}, sex = #{sex}, address = #{address} where id = #{id};
    </update>

    <delete id="deleteUser" parameterType="java.lang.Integer">
        delete from user where id = #{id};
    </delete>

    <!-- 模糊查询操作的第一种配置方式 -->
    <!-- 实际执行语句 Preparing: select * from user where username like ?; -->
    <!-- 这种方式，在传入字符串实参时，就需要给定模糊查询的标识% -->
    <select id="findByName" resultType="cn.parzulpan.domain.User" parameterType="String">
        select * from user where username like #{username};
    </select>

    <!--模糊查询操作的第二种配置方式-->
    <!-- 实际执行语句 Preparing: select * from user where username like '%Tim%'; -->
    <!-- 这种方式，在传入字符串实参时，就不需要给定模糊查询的标识% -->
    <select id="findByNameV2" resultType="cn.parzulpan.domain.User" parameterType="String">
        select * from user where username like '%${value}%';
    </select>

    <select id="findTotal" resultType="int">
        select count(*) from user;
    </select>

    <!--由于 将 ${} parameterType 传入的内容拼接在 sql 中且不进行 jdbc 类型转换
    所以，模糊查询操作的不能使用第二种配置方式-->
    <select id="findByQueryV" resultType="cn.parzulpan.domain.User" parameterType="cn.parzulpan.domain.QueryV">
        select * from user where username like #{user.username};    # user 是 QueryV 的属性
    </select>

    <select id="findByUser" resultType="User" parameterType="User">
        select * from user where 1 = 1
        <if test="username != null and username != ''">
            and username like #{username}
        </if>
        <if test="address != null">
            and address like #{address}
        </if>
    </select>

    <select id="findByUserDefault" resultType="User" parameterType="User">
        select * from user where 1 = 1
        <choose>
            <when test="username !=null and username != ''">
                and username like #{username}
            </when>
            <when test="address != null">
                and address like #{address}
            </when>
            <otherwise>
                and id > 50
            </otherwise>
        </choose>
    </select>

    <select id="findByUserWhere" resultType="User" parameterType="User">
        select * from user
        <where>
            <if test="username != null and username != ''">
                and username like #{username}
            </if>
            <if test="address != null">
                and address like #{address}
            </if>
        </where>
    </select>

    <select id="findByIds" resultType="User" parameterType="QueryV">
        select * from user
        <where>
            <if test="ids != null and ids.size() > 0">
                <foreach collection="ids" open="id in (" close=")" item="uid" separator=",">
                    #{uid}
                </foreach>
            </if>
        </where>
    </select>

    <resultMap id="userMap" type="user">
        <id column="id" property="id"/>
        <result column="username" property="username"/>
        <result column="address" property="address"/>
        <result column="sex" property="sex"/>
        <result column="birthday" property="birthday"/>

        <!-- collection 是用于建立一对多中集合属性的对应关系 ofType 用于指定集合元素的数据类型 -->
        <collection property="accounts" ofType="account">
            <id column="aid" property="id"/>
            <result column="uid" property="uid"/>
            <result column="money" property="money"/>
        </collection>
    </resultMap>

    <select id="findAllAndAccount" resultMap="userMap">
        select u.*, a.id as aid, a.uid, a.money
        from user u left join account a on u.id = a. uid;
    </select>

    <select id="findByIdLazy" resultType="user" parameterType="int">
        select * from user where id = #{uid};
    </select>

    <select id="findByIdCache" resultType="USER" parameterType="java.lang.Integer">
        select * from user where id = #{id};
    </select>

    <select id="findByIdHighCache" resultType="USER" parameterType="java.lang.Integer" useCache="true">
        select * from user where id = #{id};
    </select>

</mapper>